<?php

namespace John\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SubCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubCategoryRepository extends EntityRepository
{
    public function getSubCategoriesByCategory($category)
    {
        $qb = $this->createQueryBuilder('sc')
//                ->leftJoin('sc.category', 'c')
//                ->addSelect('c')
                ->where('sc.category = :category')
                ->setParameter('category', $category)
                ->andWhere('sc.isVisible = :is_visible')
                ->setParameter('is_visible', true)
                ->OrderBy('sc.position', 'ASC');

        return $qb->getQuery()
                        ->getResult();
    }
    
    public function getVisibleFirstSubCategoryByCategory($category)
    {
        $qb = $this->createQueryBuilder('sc')
                ->leftJoin('sc.category', 'c')
                ->addSelect('c')
                ->where('sc.category = :category')
                ->setParameter('category', $category)
                ->andWhere('sc.isVisible = :is_visible')
                ->setParameter('is_visible', true)
                ->setMaxResults(1)
                ->OrderBy('sc.position', 'ASC');

        return $qb->getQuery()
                        ->getResult();
    }

    public function getSubCategoriesByCategoryAndPositionOrder()
    {
        $qb = $this->createQueryBuilder('sc')
                ->leftJoin('sc.category', 'c')
                ->addSelect('c')
                ->OrderBy('sc.category', 'ASC')
                ->addOrderBy('sc.position', 'ASC');

        return $qb->getQuery()
                        ->getResult();
    }

    public function getSubcategoryByCategorySlugAndSubCategorySlug($category_slug, $subcategory_slug)
    {
        $qb = $this->createQueryBuilder('sc')
                ->leftJoin('sc.category', 'c')
                ->addSelect('c')
                ->where('c.slug = :category_slug')
                ->setParameter('category_slug', $category_slug)
                ->andWhere('sc.slug = :subcategory_slug')
                ->setParameter('subcategory_slug', $subcategory_slug);

        return $qb->getQuery()
                        ->getOneOrNullResult();
    }

    public function getSubCategoriesWithArticles()
    {
        $qb = $this->createQueryBuilder('sc')
                ->leftJoin('sc.articles', 'a')
                ->addSelect('a')
                ->where('a is not null')
                ->OrderBy('sc.position', 'ASC');

        return $qb->getQuery()
                        ->getResult();
    }

    public function getSubCategoriesbyTitreASC()
    {
        $qb = $this->createQueryBuilder('q')
                ->orderBy('q.title', 'ASC');

        return $qb;
    }

    public function getPublishedSubCategoriesQuery()
    {
        $qb = $this->createQueryBuilder('sc')
                ->leftJoin('sc.category', 'c')
                ->addSelect('c')
                ->andWhere('sc.isVisible = :is_visible')
                ->setParameter('is_visible', true)
                ->OrderBy('sc.category', 'ASC')
                ->addOrderBy('sc.position', 'ASC');

        return $qb;
    }
}
